/**
 * @fileoverview Firestore Security Rules for IntelliConnect CRM.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and role-based access control.
 * User data is primarily secured via path-based ownership (e.g., /agents/{agentId}).
 * Top-level collections like `/clients` and `/dashboards` are secured with a combination of roles and public read access.
 *
 * Data Structure:
 * - /clients/{clientId}: Client data, accessible to all agents but modifiable based on role.
 * - /agents/{agentId}: Agent profile data, accessible only to the agent themselves or admins.
 * - /agents/{agentId}/callScripts/{callScriptId}: Call scripts owned by an agent.
 * - /agents/{agentId}/interactions/{interactionId}: Interactions owned by an agent.
 * - /dashboards/{dashboardId}: Role-based dashboards.
 * - /contacts/{contactId}: Contact form submissions, readable by admins/agents.
 * - /reviews/{reviewId}: Customer reviews, publicly readable, writable by anyone, but only admins can modify/delete.
 *
 * Key Security Decisions:
 * - Listing of reviews is publicly allowed.
 * - Agents can only manage their own call scripts and interactions.
 * - Clients are readable by all authenticated users.
 *
 * Denormalization for Authorization:
 * - The `agentId` is denormalized into the `interactions` and `callScripts` collections to avoid `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows agents to manage client information. Accessible to all authenticated agents, but modifications are restricted based on role and ownership.
     * @path /clients/{clientId}
     * @allow (read): If the user is signed in.
     * @allow (create, update, delete): if false; // TODO: Add owner validation once roles are defined for agents.
     * @deny (create, update, delete): If the user is not signed in.
     * @principle Agents can read Clients. Write access is not defined for this prototype.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add owner validation once roles are defined for agents.
    }

    /**
     * @description Allows agents to manage their own profile information. Only accessible to the agent themselves and admins.
     * @path /agents/{agentId}
     * @allow (get, list): If the user is the owner of the agent profile.
     * @allow (create): If the user's ID matches the agent ID (self-creation).
     * @allow (update, delete): If the user is the owner of the agent profile and the document exists.
     * @deny (get, list, create, update, delete): If the user is not signed in or is not the owner.
     * @principle Enforces strict ownership for agent profiles.
     */
    match /agents/{agentId} {
      allow get: if isSignedIn() && isOwner(agentId);
      allow list: if false; // Prevent listing all agents
      allow create: if isSignedIn() && isOwner(agentId);
      allow update: if isSignedIn() && isExistingOwner(agentId);
      allow delete: if isSignedIn() && isExistingOwner(agentId);
    }

    /**
     * @description Allows agents to manage their own call scripts. Includes denormalized 'agentId' for authorization independence.
     * @path /agents/{agentId}/callScripts/{callScriptId}
     * @allow (get, list): If the user is the owner of the agent profile (path-based).
     * @allow (create): If the user is the owner of the agent profile and the agentId in the data matches the path.
     * @allow (update, delete): If the user is the owner of the agent profile, the document exists, and the agentId in the data matches the path.
     * @deny (get, list, create, update, delete): If the user is not signed in, is not the owner, or the agentId does not match.
     * @principle Enforces ownership for call scripts via path and data consistency.
     */
    match /agents/{agentId}/callScripts/{callScriptId} {
      allow get, list: if isSignedIn() && isOwner(agentId);
      allow create: if isSignedIn() && isOwner(agentId) && request.resource.data.agentId == agentId;
      allow update: if isSignedIn() && isExistingOwner(agentId) && resource.data.agentId == agentId;
      allow delete: if isSignedIn() && isExistingOwner(agentId) && resource.data.agentId == agentId;
    }

    /**
     * @description Allows agents to manage their own interactions with clients. Includes denormalized 'agentId' for authorization independence.
     * @path /agents/{agentId}/interactions/{interactionId}
     * @allow (get, list): If the user is the owner of the agent profile (path-based).
     * @allow (create): If the user is the owner of the agent profile and the agentId in the data matches the path.
     * @allow (update, delete): If the user is the owner of the agent profile, the document exists, and the agentId in the data matches the path.
     * @deny (get, list, create, update, delete): If the user is not signed in, is not the owner, or the agentId does not match.
     * @principle Enforces ownership for interactions via path and data consistency.
     */
    match /agents/{agentId}/interactions/{interactionId} {
      allow get, list: if isSignedIn() && isOwner(agentId);
      allow create: if isSignedIn() && isOwner(agentId) && request.resource.data.agentId == agentId;
      allow update: if isSignedIn() && isExistingOwner(agentId) && resource.data.agentId == agentId;
      allow delete: if isSignedIn() && isExistingOwner(agentId) && resource.data.agentId == agentId;
    }

    /**
     * @description Allows access to role-based dashboards based on the 'role' field.
     * @path /dashboards/{dashboardId}
     * @allow (get, list): if true; // TODO: Implement role-based dashboard access.
     * @allow (create, update, delete): if false; // TODO: Implement role-based dashboard access.
     * @deny (create, update, delete): If the user is not signed in.
     */
    match /dashboards/{dashboardId} {
      allow get, list: if true; // TODO: Implement role-based dashboard access.
      allow create, update, delete: if false; // TODO: Implement role-based dashboard access.
    }

    /**
     * @description Allows agents to read contact form submissions from external users.
     * @path /contacts/{contactId}
     * @allow (get, list): if true; // TODO: Restrict listing to admins/agents once roles are defined.
     * @allow (create): if false;
     * @allow (update, delete): if false;
     */
    match /contacts/{contactId} {
      allow get, list: if true; // TODO: Restrict listing to admins/agents once roles are defined.
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public submission of customer reviews, but only admins can modify or delete them.
     * @path /reviews/{reviewId}
     * @allow (get, list): if true;
     * @allow (create): if true;
     * @allow (update, delete): if false; // TODO: Add owner validation once roles are defined for admins.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create: if true;
      allow update, delete: if false; // TODO: Add owner validation once roles are defined for admins.
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}