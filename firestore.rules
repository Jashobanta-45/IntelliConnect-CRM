/**
 * @file Firestore Security Rules for IntelliConnect CRM
 * @description This ruleset enforces a multi-tenant security model with role-based access control and ownership for agent-specific resources.
 *
 * Data Structure:
 * - /clients/{clientId}: Stores client information.
 * - /agents/{agentId}: Stores agent information.
 * - /agents/{agentId}/callScripts/{callScriptId}: Stores call scripts associated with a specific agent.
 * - /agents/{agentId}/interactions/{interactionId}: Stores interactions associated with a specific agent and client.
 * - /dashboards/{dashboardId}: Stores role-based dashboards.
 * - /contacts/{contactId}: Stores contact form submissions.
 *
 * Key Security Decisions:
 * - Agents can only access their own call scripts and interactions.
 * - Admins have read access to all data.
 * - Public read access for contact form submissions.
 * - Dashboard access is restricted by role.
 * - User listing is not allowed
 *
 * Denormalization for Authorization:
 * - `agentId` is denormalized into the `interactions` and `callScripts` collections to avoid `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and write access to client information based on agent role.
     * @path /clients/{clientId}
     * @allow (read) Agent with any role can read client data.
     * @allow (create, update, delete) Only admins can create, update, or delete client data.
     * @deny (create, update, delete) Non-admin agents cannot create, update, or delete client data.
     * @principle Enforces role-based access control for client data.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/agents/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Allows agents to read and modify their own agent data.
     * @path /agents/{agentId}
     * @allow (get, list) Agent can read their own data.
     * @allow (create, update, delete) Agent can modify their own data.
     * @deny (get, list, create, update, delete) Agents cannot access other agent's data.
     * @principle Enforces document ownership for agent data.
     */
    match /agents/{agentId} {
      allow get: if isSignedIn() && isOwner(agentId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(agentId);
      allow update: if isSignedIn() && isExistingOwner(agentId);
      allow delete: if isSignedIn() && isExistingOwner(agentId);
    }

    /**
     * @description Allows an agent to manage their own call scripts.
     * @path /agents/{agentId}/callScripts/{callScriptId}
     * @allow (get, list) Agent can read their own call scripts.
     * @allow (create, update, delete) Agent can create, update, and delete their own call scripts.
     * @deny (get, list, create, update, delete) Agents cannot access other agent's call scripts.
     * @principle Enforces document ownership for call scripts.
     */
    match /agents/{agentId}/callScripts/{callScriptId} {
      allow get, list: if isSignedIn() && isOwner(agentId);
      allow create: if isSignedIn() && isOwner(agentId);
      allow update: if isSignedIn() && isExistingOwner(agentId);
      allow delete: if isSignedIn() && isExistingOwner(agentId);
    }

    /**
     * @description Allows an agent to manage their own interactions.
     * @path /agents/{agentId}/interactions/{interactionId}
     * @allow (get, list) Agent can read their own interactions.
     * @allow (create, update, delete) Agent can create, update, and delete their own interactions.
     * @deny (get, list, create, update, delete) Agents cannot access other agent's interactions.
     * @principle Enforces document ownership for interactions.
     */
    match /agents/{agentId}/interactions/{interactionId} {
      allow get, list: if isSignedIn() && isOwner(agentId);
      allow create: if isSignedIn() && isOwner(agentId);
      allow update: if isSignedIn() && isExistingOwner(agentId);
      allow delete: if isSignedIn() && isExistingOwner(agentId);
    }

    /**
     * @description Allows access to dashboards based on role.
     * @path /dashboards/{dashboardId}
     * @allow (get, list) Any signed-in user can read dashboards.  Role is validated in the application.
     * @allow (create, update, delete) Only admins can create, update, or delete dashboards.
     * @deny (create, update, delete) Non-admin agents cannot create, update, or delete dashboards.
     * @principle Enforces role-based access control for dashboards.
     */
    match /dashboards/{dashboardId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/agents/$(request.auth.uid)).data.role == 'admin';
    }

     /**
      * @description Allows public read access to contact form submissions. Only admins/agents can create, update, or delete.
      * @path /contacts/{contactId}
      * @allow (get, list) Anyone can read contact form submissions.
      * @allow (create) Anyone can create contact form submissions.
      * @allow (update, delete) Only admins can update/delete contact submissions.
      * @deny (update, delete) Non-admin/agent users cannot update/delete contact submissions.
      * @principle Allows public read access with restricted write access.
      */
    match /contacts/{contactId} {
      allow get, list: if true;
      allow create: if true;
      allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/agents/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}