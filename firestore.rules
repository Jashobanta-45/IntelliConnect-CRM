/**
 * @fileoverview Firestore Security Rules for IntelliConnect CRM.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant security model based on authenticated users (agents) and their associated data.
 * Data is segregated into collections with specific access control patterns: agent-owned, role-based, and public-read with owner-only writes.
 *
 * Data Structure:
 * - /clients/{clientId}: Client information accessible to authenticated agents.
 * - /agents/{agentId}: Agent profiles, accessible to the agent themselves and admins.
 * - /agents/{agentId}/callScripts/{callScriptId}: Call scripts owned by an agent.
 * - /agents/{agentId}/interactions/{interactionId}: Interactions related to an agent's client.
 * - /dashboards/{dashboardId}: Role-based dashboards.
 * - /contacts/{contactId}: Contact form submissions, readable by admins/agents.
 * - /reviews/{reviewId}: Customer reviews, publicly submittable but only readable by admins.
 *
 * Key Security Decisions:
 * - Agents can only access their own call scripts and interactions.
 * - Clients are readable by all authenticated agents, but write access is role-based (not yet implemented).
 * - Contact form submissions and reviews are publicly accessible for creation but have restricted read access.
 * - Listing of contact submissions is allowed for authenticated users.
 * - Listing of reviews is denied.
 *
 * Denormalization for Authorization:
 * The `agentId` is denormalized into the `interactions` and `callScripts` collections to avoid `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Secures client documents. Accessible to authenticated agents, but write permissions are not defined yet.
     * @path /clients/{clientId}
     * @allow get (authenticated): Any authenticated agent can read client data.
     * @deny get (unauthenticated): Unauthenticated users cannot read client data.
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Requires authentication for reads. Write rules are not yet defined.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures agent profile documents.
     * @path /agents/{agentId}
     * @allow get (owner): The agent can read their own profile.
     * @deny get (other): Another agent cannot read this agent's profile.
     * @allow create (owner): An agent can create their profile with matching ID.
     * @deny create (other): An agent cannot create another agent's profile.
     * @allow update (owner): An agent can update their own profile.
     * @deny update (other): Another agent cannot update this agent's profile.
     * @allow delete (owner): An agent can delete their own profile.
     * @deny delete (other): Another agent cannot delete this agent's profile.
     * @principle Enforces document ownership and requires matching user ID.
     */
    match /agents/{agentId} {
      allow get: if isOwner(agentId);
      allow list: if false;
      allow create: if isOwner(agentId);
      allow update: if isOwner(agentId) && resource != null;
      allow delete: if isOwner(agentId) && resource != null;
    }

    /**
     * @description Secures call script documents under an agent.
     * @path /agents/{agentId}/callScripts/{callScriptId}
     * @allow get (owner): The agent can read their own call scripts.
     * @deny get (other): Another agent cannot read this agent's call scripts.
     * @allow create (owner): An agent can create their own call scripts.
     * @deny create (other): Another agent cannot create call scripts under another agent.
     * @allow update (owner): The agent can update their own call scripts.
     * @deny update (other): Another agent cannot update this agent's call scripts.
     * @allow delete (owner): The agent can delete their own call scripts.
     * @deny delete (other): Another agent cannot delete this agent's call scripts.
     * @principle Enforces document ownership for agent-specific data.
     */
    match /agents/{agentId}/callScripts/{callScriptId} {
      allow get: if isOwner(agentId);
      allow list: if isOwner(agentId);
      allow create: if isOwner(agentId);
      allow update: if isOwner(agentId) && resource != null;
      allow delete: if isOwner(agentId) && resource != null;
    }

    /**
     * @description Secures interaction documents under an agent.
     * @path /agents/{agentId}/interactions/{interactionId}
     * @allow get (owner): The agent can read their own interactions.
     * @deny get (other): Another agent cannot read this agent's interactions.
     * @allow create (owner): An agent can create their own interactions.
     * @deny create (other): Another agent cannot create interactions under another agent.
     * @allow update (owner): The agent can update their own interactions.
     * @deny update (other): Another agent cannot update this agent's interactions.
     * @allow delete (owner): The agent can delete their own interactions.
     * @deny delete (other): Another agent cannot delete this agent's interactions.
     * @principle Enforces document ownership for agent-specific data.
     */
    match /agents/{agentId}/interactions/{interactionId} {
      allow get: if isOwner(agentId);
      allow list: if isOwner(agentId);
      allow create: if isOwner(agentId);
      allow update: if isOwner(agentId) && resource != null;
      allow delete: if isOwner(agentId) && resource != null;
    }

    /**
     * @description Secures dashboard documents based on the 'role' field.
     * @path /dashboards/{dashboardId}
     * @allow get (public): Any authenticated user can read dashboards. Role-based filtering not yet implemented.
     * @deny get (unauthenticated): Unauthenticated users cannot read dashboards.
     * @allow create: if false; // TODO: Implement role-based access for creating dashboards.
     * @allow update: if false; // TODO: Implement role-based access for updating dashboards.
     * @allow delete: if false; // TODO: Implement role-based access for deleting dashboards.
     * @principle Requires authentication for reads, with role-based access to be implemented.
     */
    match /dashboards/{dashboardId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false; // TODO: Implement role-based access for creating dashboards.
      allow update: if false; // TODO: Implement role-based access for updating dashboards.
      allow delete: if false; // TODO: Implement role-based access for deleting dashboards.
    }

    /**
     * @description Secures contact form submissions.
     * @path /contacts/{contactId}
     * @allow get (public): Any authenticated user can read a contact submission.
     * @allow list (public): Any authenticated user can list contact submissions.
     * @allow create (public): Anyone can create a contact submission.
     * @deny update: No updates allowed.
     * @deny delete: No deletes allowed.
     * @principle Allows public creation and authenticated listing, but disallows updates/deletes.
     */
    match /contacts/{contactId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures customer reviews.
     * @path /reviews/{reviewId}
     * @allow get (none): No one can read customer reviews.
     * @deny list (public): No one can list reviews.
     * @allow create (public): Anyone can create a review.
     * @deny update: No updates allowed.
     * @deny delete: No deletes allowed.
     */
    match /reviews/{reviewId} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}